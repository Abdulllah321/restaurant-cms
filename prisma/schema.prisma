generator client {
  provider = "prisma-client-js"
}

datasource db { 
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String?
  role      Role     @default(CUSTOMER) // Role can be 'ADMIN', 'MANAGER', 'WAITER', 'CUSTOMER'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokenVersion Int @default(0)

  // Social Media Authentication
  socialAuth SocialAuth?

  // Relationships
  Order       Order[]
  Review      Review[]
  Reservation Reservation[]
  Feedback    Feedback[]
}

enum Role {
  ADMIN
  MANAGER
  WAITER
  CUSTOMER
}

model SocialAuth {
  id         String         @id @default(cuid())
  userId     Int            @unique
  provider   SocialProvider
  providerId String // Unique ID provided by the social media service (e.g., Google ID)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum SocialProvider {
  GOOGLE
  FACEBOOK
  TWITTER
  GITHUB
  APPLE
}

model Menu {
  id          String     @id @default(cuid())
  name        String
  description String?
  branchId    String
  branch      Branch     @relation(fields: [branchId], references: [id])
  categories  Category[] // Categories associated with this menu
  items       MenuItem[] // Items directly linked to this menu
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}


model Category {
  id        String     @id @default(cuid())
  name      String
  menuId    String
  menu      Menu       @relation(fields: [menuId], references: [id])
  branchId  String
  branch    Branch     @relation(fields: [branchId], references: [id]) // Link to the branch
  items     MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}


model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  menuId      String
  menu        Menu     @relation(fields: [menuId], references: [id])
  branchId    String
  branch      Branch   @relation(fields: [branchId], references: [id]) // Add Branch relationship
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  OrderItem OrderItem[]
}


model Order {
  id         String      @id @default(cuid())
  customerId Int
  customer   User        @relation(fields: [customerId], references: [id])
  status     OrderStatus @default(PENDING)
  totalPrice Float
  items      OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  Payment Payment[]

  Delivery Delivery[]
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int
  price      Float
}

model Reservation {
  id              String            @id @default(cuid())
  customerId      Int
  customer        User              @relation(fields: [customerId], references: [id])
  reservationDate DateTime
  partySize       Int
  status          ReservationStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  Table Table[]

  Branch Branch[]
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Table {
  id          String        @id @default(cuid())
  tableNumber Int
  seats       Int
  status      TableStatus   @default(AVAILABLE)
  reservation Reservation[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum TableStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
}

model Staff {
  id         String    @id @default(cuid())
  firstName  String
  lastName   String
  email      String    @unique
  role       StaffRole
  hiredDate  DateTime  @default(now())
  shiftStart DateTime
  shiftEnd   DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  Delivery Delivery[]

  Branch Branch[]
}

enum StaffRole {
  CHEF
  WAITER
  MANAGER
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Float
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  ONLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Review {
  id         String   @id @default(cuid())
  customerId Int
  customer   User     @relation(fields: [customerId], references: [id])
  rating     Int // 1 to 5 stars
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Promotion {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  discount    Float // Percentage discount
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Inventory {
  id        String   @id @default(cuid())
  itemName  String
  quantity  Int
  unitPrice Float
  supplier  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Supplier Supplier[]

  Branch Branch[]
}

model Supplier {
  id          String      @id @default(cuid())
  name        String
  contactInfo String
  products    Inventory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Delivery {
  id              String         @id @default(cuid())
  orderId         String
  order           Order          @relation(fields: [orderId], references: [id])
  deliveryStatus  DeliveryStatus @default(PENDING)
  driverId        String?
  driver          Staff?         @relation(fields: [driverId], references: [id])
  deliveryTime    DateTime?
  deliveryAddress String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Branch {
  id           String        @id @default(cuid())
  name         String
  location     String
  phoneNumber  String
  staff        Staff[]
  menu         Menu[]
  inventory    Inventory[]
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  Category Category[]

  MenuItem MenuItem[]
}

model Feedback {
  id         String           @id @default(cuid())
  customerId Int
  customer   User             @relation(fields: [customerId], references: [id])
  feedback   String
  rating     Int // Specific feedback on different aspects (service, food, ambiance, etc.)
  category   FeedbackCategory
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum FeedbackCategory {
  FOOD
  SERVICE
  AMBIENCE
  OVERALL_EXPERIENCE
}
