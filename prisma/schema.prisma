generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String    @unique
  password          String?
  role              Role      @default(CUSTOMER) // Role can be 'ADMIN', 'MANAGER', 'WAITER', 'CUSTOMER'
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Social Media Authentication
  socialAuth        SocialAuth?

  // Relationships
  Order             Order[]
  Review            Review[]
  Reservation       Reservation[]
  Feedback          Feedback[]
}

enum Role {
  ADMIN
  MANAGER
  WAITER
  CUSTOMER
}

model SocialAuth {
  id          Int       @id @default(autoincrement())
  userId      Int @unique
  provider    SocialProvider
  providerId  String    // Unique ID provided by the social media service (e.g., Google ID)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
}

enum SocialProvider {
  GOOGLE
  FACEBOOK
  TWITTER
  GITHUB
  APPLE
  // Add other providers as needed
}

model Menu {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  categories  Category[]
  items       MenuItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Branch Branch[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  menuId    Int
  menu      Menu      @relation(fields: [menuId], references: [id])
  items     MenuItem[]
}

model MenuItem {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Float
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  Menu Menu[]

  OrderItem OrderItem[]
}

model Order {
  id          Int          @id @default(autoincrement())
  customerId  Int
  customer    User         @relation(fields: [customerId], references: [id])
  status      OrderStatus  @default(PENDING)
  totalPrice  Float
  items       OrderItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  Payment Payment[]

  Delivery Delivery[]
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int
  order     Order     @relation(fields: [orderId], references: [id])
  menuItemId Int
  menuItem  MenuItem  @relation(fields: [menuItemId], references: [id])
  quantity  Int
  price     Float
}

model Reservation {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    User      @relation(fields: [customerId], references: [id])
  reservationDate DateTime
  partySize   Int
  status      ReservationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Table Table[]

  Branch Branch[]
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Table {
  id          Int          @id @default(autoincrement())
  tableNumber Int
  seats       Int
  status      TableStatus @default(AVAILABLE)
  reservation Reservation[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum TableStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
}

model Staff {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String    @unique
  role        StaffRole
  hiredDate   DateTime  @default(now())
  shiftStart  DateTime
  shiftEnd    DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  Delivery Delivery[]

  Branch Branch[]
}

enum StaffRole {
  CHEF
  WAITER
  MANAGER
}

model Payment {
  id          Int       @id @default(autoincrement())
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id])
  amount      Float
  paymentDate DateTime  @default(now())
  paymentMethod PaymentMethod
  status      PaymentStatus @default(PENDING)
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  ONLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Review {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    User      @relation(fields: [customerId], references: [id])
  rating      Int       // 1 to 5 stars
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Promotion {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String?
  discount    Float     // Percentage discount
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Inventory {
  id          Int       @id @default(autoincrement())
  itemName    String
  quantity    Int
  unitPrice   Float
  supplier    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  Supplier Supplier[]

  Branch Branch[]
}

model Supplier {
  id          Int       @id @default(autoincrement())
  name        String
  contactInfo String
  products    Inventory[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Delivery {
  id          Int       @id @default(autoincrement())
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id])
  deliveryStatus DeliveryStatus @default(PENDING)
  driverId    Int?
  driver      Staff?    @relation(fields: [driverId], references: [id])
  deliveryTime DateTime?
  deliveryAddress String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Branch {
  id          Int       @id @default(autoincrement())
  name        String
  location    String
  phoneNumber String
  staff       Staff[]
  menu        Menu[]
  inventory   Inventory[]
  reservations Reservation[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Feedback {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    User      @relation(fields: [customerId], references: [id])
  feedback    String
  rating      Int       // Specific feedback on different aspects (service, food, ambiance, etc.)
  category    FeedbackCategory
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum FeedbackCategory {
  FOOD
  SERVICE
  AMBIENCE
  OVERALL_EXPERIENCE
}
